/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface MarzResourcesInterface extends ethers.utils.Interface {
  functions: {
    'ANTIMONY()': FunctionFragment
    'BACTERIA()': FunctionFragment
    'BISMUTH()': FunctionFragment
    'CHROMIUM()': FunctionFragment
    'COBALT()': FunctionFragment
    'COPPER()': FunctionFragment
    'DIAMOND()': FunctionFragment
    'DIRT()': FunctionFragment
    'GOLD()': FunctionFragment
    'ICE()': FunctionFragment
    'IRON()': FunctionFragment
    'LEAD()': FunctionFragment
    'LITHIUM()': FunctionFragment
    'MERCURY()': FunctionFragment
    'NICKEL()': FunctionFragment
    'SILVER()': FunctionFragment
    'TIN()': FunctionFragment
    'TUNGSTEN()': FunctionFragment
    'ZINC()': FunctionFragment
    'balanceOf(address,uint256)': FunctionFragment
    'balanceOfBatch(address[],uint256[])': FunctionFragment
    'claimed(uint256)': FunctionFragment
    'getResources(uint256)': FunctionFragment
    'initialize(address)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'marz()': FunctionFragment
    'mine(uint256)': FunctionFragment
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'startTimes(uint256)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'uri(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'ANTIMONY', values?: undefined): string
  encodeFunctionData(functionFragment: 'BACTERIA', values?: undefined): string
  encodeFunctionData(functionFragment: 'BISMUTH', values?: undefined): string
  encodeFunctionData(functionFragment: 'CHROMIUM', values?: undefined): string
  encodeFunctionData(functionFragment: 'COBALT', values?: undefined): string
  encodeFunctionData(functionFragment: 'COPPER', values?: undefined): string
  encodeFunctionData(functionFragment: 'DIAMOND', values?: undefined): string
  encodeFunctionData(functionFragment: 'DIRT', values?: undefined): string
  encodeFunctionData(functionFragment: 'GOLD', values?: undefined): string
  encodeFunctionData(functionFragment: 'ICE', values?: undefined): string
  encodeFunctionData(functionFragment: 'IRON', values?: undefined): string
  encodeFunctionData(functionFragment: 'LEAD', values?: undefined): string
  encodeFunctionData(functionFragment: 'LITHIUM', values?: undefined): string
  encodeFunctionData(functionFragment: 'MERCURY', values?: undefined): string
  encodeFunctionData(functionFragment: 'NICKEL', values?: undefined): string
  encodeFunctionData(functionFragment: 'SILVER', values?: undefined): string
  encodeFunctionData(functionFragment: 'TIN', values?: undefined): string
  encodeFunctionData(functionFragment: 'TUNGSTEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'ZINC', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [string[], BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'claimed',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getResources',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string
  encodeFunctionData(functionFragment: 'marz', values?: undefined): string
  encodeFunctionData(functionFragment: 'mine', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string
  encodeFunctionData(
    functionFragment: 'startTimes',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: 'ANTIMONY', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'BACTERIA', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'BISMUTH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'CHROMIUM', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'COBALT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'COPPER', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'DIAMOND', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'DIRT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'GOLD', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ICE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'IRON', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'LEAD', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'LITHIUM', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MERCURY', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'NICKEL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'SILVER', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'TIN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'TUNGSTEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ZINC', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'balanceOfBatch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getResources',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'marz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mine', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'safeBatchTransferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'startTimes', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment
    'URI(string,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment
}

export class MarzResources extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: MarzResourcesInterface

  functions: {
    ANTIMONY(overrides?: CallOverrides): Promise<[BigNumber]>

    BACTERIA(overrides?: CallOverrides): Promise<[BigNumber]>

    BISMUTH(overrides?: CallOverrides): Promise<[BigNumber]>

    CHROMIUM(overrides?: CallOverrides): Promise<[BigNumber]>

    COBALT(overrides?: CallOverrides): Promise<[BigNumber]>

    COPPER(overrides?: CallOverrides): Promise<[BigNumber]>

    DIAMOND(overrides?: CallOverrides): Promise<[BigNumber]>

    DIRT(overrides?: CallOverrides): Promise<[BigNumber]>

    GOLD(overrides?: CallOverrides): Promise<[BigNumber]>

    ICE(overrides?: CallOverrides): Promise<[BigNumber]>

    IRON(overrides?: CallOverrides): Promise<[BigNumber]>

    LEAD(overrides?: CallOverrides): Promise<[BigNumber]>

    LITHIUM(overrides?: CallOverrides): Promise<[BigNumber]>

    MERCURY(overrides?: CallOverrides): Promise<[BigNumber]>

    NICKEL(overrides?: CallOverrides): Promise<[BigNumber]>

    SILVER(overrides?: CallOverrides): Promise<[BigNumber]>

    TIN(overrides?: CallOverrides): Promise<[BigNumber]>

    TUNGSTEN(overrides?: CallOverrides): Promise<[BigNumber]>

    ZINC(overrides?: CallOverrides): Promise<[BigNumber]>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    getResources(
      plotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { resources: BigNumber[] }>

    initialize(
      _marz: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    marz(overrides?: CallOverrides): Promise<[string]>

    mine(
      plotId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    startTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>
  }

  ANTIMONY(overrides?: CallOverrides): Promise<BigNumber>

  BACTERIA(overrides?: CallOverrides): Promise<BigNumber>

  BISMUTH(overrides?: CallOverrides): Promise<BigNumber>

  CHROMIUM(overrides?: CallOverrides): Promise<BigNumber>

  COBALT(overrides?: CallOverrides): Promise<BigNumber>

  COPPER(overrides?: CallOverrides): Promise<BigNumber>

  DIAMOND(overrides?: CallOverrides): Promise<BigNumber>

  DIRT(overrides?: CallOverrides): Promise<BigNumber>

  GOLD(overrides?: CallOverrides): Promise<BigNumber>

  ICE(overrides?: CallOverrides): Promise<BigNumber>

  IRON(overrides?: CallOverrides): Promise<BigNumber>

  LEAD(overrides?: CallOverrides): Promise<BigNumber>

  LITHIUM(overrides?: CallOverrides): Promise<BigNumber>

  MERCURY(overrides?: CallOverrides): Promise<BigNumber>

  NICKEL(overrides?: CallOverrides): Promise<BigNumber>

  SILVER(overrides?: CallOverrides): Promise<BigNumber>

  TIN(overrides?: CallOverrides): Promise<BigNumber>

  TUNGSTEN(overrides?: CallOverrides): Promise<BigNumber>

  ZINC(overrides?: CallOverrides): Promise<BigNumber>

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>

  claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getResources(
    plotId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>

  initialize(
    _marz: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>

  marz(overrides?: CallOverrides): Promise<string>

  mine(
    plotId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  startTimes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  callStatic: {
    ANTIMONY(overrides?: CallOverrides): Promise<BigNumber>

    BACTERIA(overrides?: CallOverrides): Promise<BigNumber>

    BISMUTH(overrides?: CallOverrides): Promise<BigNumber>

    CHROMIUM(overrides?: CallOverrides): Promise<BigNumber>

    COBALT(overrides?: CallOverrides): Promise<BigNumber>

    COPPER(overrides?: CallOverrides): Promise<BigNumber>

    DIAMOND(overrides?: CallOverrides): Promise<BigNumber>

    DIRT(overrides?: CallOverrides): Promise<BigNumber>

    GOLD(overrides?: CallOverrides): Promise<BigNumber>

    ICE(overrides?: CallOverrides): Promise<BigNumber>

    IRON(overrides?: CallOverrides): Promise<BigNumber>

    LEAD(overrides?: CallOverrides): Promise<BigNumber>

    LITHIUM(overrides?: CallOverrides): Promise<BigNumber>

    MERCURY(overrides?: CallOverrides): Promise<BigNumber>

    NICKEL(overrides?: CallOverrides): Promise<BigNumber>

    SILVER(overrides?: CallOverrides): Promise<BigNumber>

    TIN(overrides?: CallOverrides): Promise<BigNumber>

    TUNGSTEN(overrides?: CallOverrides): Promise<BigNumber>

    ZINC(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getResources(
      plotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    initialize(_marz: string, overrides?: CallOverrides): Promise<void>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    marz(overrides?: CallOverrides): Promise<string>

    mine(plotId: BigNumberish, overrides?: CallOverrides): Promise<void>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    startTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>
  }

  filters: {
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null,
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null,
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string
        from: string
        to: string
        ids: BigNumber[]
        values: BigNumber[]
      }
    >

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null,
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string
        from: string
        to: string
        id: BigNumber
        value: BigNumber
      }
    >

    URI(
      value?: null,
      id?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>
  }

  estimateGas: {
    ANTIMONY(overrides?: CallOverrides): Promise<BigNumber>

    BACTERIA(overrides?: CallOverrides): Promise<BigNumber>

    BISMUTH(overrides?: CallOverrides): Promise<BigNumber>

    CHROMIUM(overrides?: CallOverrides): Promise<BigNumber>

    COBALT(overrides?: CallOverrides): Promise<BigNumber>

    COPPER(overrides?: CallOverrides): Promise<BigNumber>

    DIAMOND(overrides?: CallOverrides): Promise<BigNumber>

    DIRT(overrides?: CallOverrides): Promise<BigNumber>

    GOLD(overrides?: CallOverrides): Promise<BigNumber>

    ICE(overrides?: CallOverrides): Promise<BigNumber>

    IRON(overrides?: CallOverrides): Promise<BigNumber>

    LEAD(overrides?: CallOverrides): Promise<BigNumber>

    LITHIUM(overrides?: CallOverrides): Promise<BigNumber>

    MERCURY(overrides?: CallOverrides): Promise<BigNumber>

    NICKEL(overrides?: CallOverrides): Promise<BigNumber>

    SILVER(overrides?: CallOverrides): Promise<BigNumber>

    TIN(overrides?: CallOverrides): Promise<BigNumber>

    TUNGSTEN(overrides?: CallOverrides): Promise<BigNumber>

    ZINC(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getResources(
      plotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initialize(
      _marz: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    marz(overrides?: CallOverrides): Promise<BigNumber>

    mine(
      plotId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    startTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    ANTIMONY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    BACTERIA(overrides?: CallOverrides): Promise<PopulatedTransaction>

    BISMUTH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    CHROMIUM(overrides?: CallOverrides): Promise<PopulatedTransaction>

    COBALT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    COPPER(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DIAMOND(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DIRT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    GOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ICE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    IRON(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LEAD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LITHIUM(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MERCURY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    NICKEL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    SILVER(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TIN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TUNGSTEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ZINC(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    claimed(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getResources(
      plotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initialize(
      _marz: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    marz(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mine(
      plotId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    startTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
