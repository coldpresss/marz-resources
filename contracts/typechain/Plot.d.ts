/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface PlotInterface extends ethers.utils.Interface {
  functions: {
    'FREE_PLOTS()': FunctionFragment
    'GRID_HEIGHT()': FunctionFragment
    'GRID_WIDTH()': FunctionFragment
    'MAX_PLOTS()': FunctionFragment
    'PUBLIC_CLAIM_FEE()': FunctionFragment
    'PUBLIC_PLOTS_RESERVED()': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'claimFees()': FunctionFragment
    'claimTo(address,uint256)': FunctionFragment
    'claimWithLoot(uint256,uint256)': FunctionFragment
    'exists(uint256)': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getPlotID(uint256,uint256)': FunctionFragment
    'getXY(uint256)': FunctionFragment
    'hasAdjacentPlot(uint256)': FunctionFragment
    'initialize(address,uint256[])': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'lootNFT()': FunctionFragment
    'lootPlotsCalimed(uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'publicPlotsAvailable()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'tokenByIndex(uint256)': FunctionFragment
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'FREE_PLOTS', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'GRID_HEIGHT',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'GRID_WIDTH', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAX_PLOTS', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'PUBLIC_CLAIM_FEE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'PUBLIC_PLOTS_RESERVED',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'claimFees', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimTo',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'claimWithLoot',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'exists', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getPlotID',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'getXY', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'hasAdjacentPlot',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string
  encodeFunctionData(functionFragment: 'lootNFT', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'lootPlotsCalimed',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'publicPlotsAvailable',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'tokenByIndex',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string

  decodeFunctionResult(functionFragment: 'FREE_PLOTS', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'GRID_HEIGHT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'GRID_WIDTH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAX_PLOTS', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'PUBLIC_CLAIM_FEE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'PUBLIC_PLOTS_RESERVED',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimFees', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'claimWithLoot',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPlotID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getXY', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'hasAdjacentPlot',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'lootNFT', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lootPlotsCalimed',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'publicPlotsAvailable',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'tokenByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'tokenOfOwnerByIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export class Plot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: PlotInterface

  functions: {
    FREE_PLOTS(overrides?: CallOverrides): Promise<[BigNumber]>

    GRID_HEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>

    GRID_WIDTH(overrides?: CallOverrides): Promise<[BigNumber]>

    MAX_PLOTS(overrides?: CallOverrides): Promise<[BigNumber]>

    PUBLIC_CLAIM_FEE(overrides?: CallOverrides): Promise<[BigNumber]>

    PUBLIC_PLOTS_RESERVED(overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    claimTo(
      to: string,
      plotID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    claimWithLoot(
      lootID: BigNumberish,
      plotID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    exists(plotID: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getPlotID(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getXY(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>

    hasAdjacentPlot(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    initialize(
      lootNFT_: string,
      towns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    lootNFT(overrides?: CallOverrides): Promise<[string]>

    lootPlotsCalimed(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    name(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    publicPlotsAvailable(overrides?: CallOverrides): Promise<[BigNumber]>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  FREE_PLOTS(overrides?: CallOverrides): Promise<BigNumber>

  GRID_HEIGHT(overrides?: CallOverrides): Promise<BigNumber>

  GRID_WIDTH(overrides?: CallOverrides): Promise<BigNumber>

  MAX_PLOTS(overrides?: CallOverrides): Promise<BigNumber>

  PUBLIC_CLAIM_FEE(overrides?: CallOverrides): Promise<BigNumber>

  PUBLIC_PLOTS_RESERVED(overrides?: CallOverrides): Promise<BigNumber>

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  claimFees(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  claimTo(
    to: string,
    plotID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  claimWithLoot(
    lootID: BigNumberish,
    plotID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  exists(plotID: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getPlotID(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getXY(
    plotID: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>

  hasAdjacentPlot(
    plotID: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  initialize(
    lootNFT_: string,
    towns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>

  lootNFT(overrides?: CallOverrides): Promise<string>

  lootPlotsCalimed(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  name(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  publicPlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    FREE_PLOTS(overrides?: CallOverrides): Promise<BigNumber>

    GRID_HEIGHT(overrides?: CallOverrides): Promise<BigNumber>

    GRID_WIDTH(overrides?: CallOverrides): Promise<BigNumber>

    MAX_PLOTS(overrides?: CallOverrides): Promise<BigNumber>

    PUBLIC_CLAIM_FEE(overrides?: CallOverrides): Promise<BigNumber>

    PUBLIC_PLOTS_RESERVED(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    claimFees(overrides?: CallOverrides): Promise<void>

    claimTo(
      to: string,
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    claimWithLoot(
      lootID: BigNumberish,
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    exists(plotID: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    getPlotID(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getXY(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>

    hasAdjacentPlot(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(
      lootNFT_: string,
      towns: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    lootNFT(overrides?: CallOverrides): Promise<string>

    lootPlotsCalimed(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    publicPlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >
  }

  estimateGas: {
    FREE_PLOTS(overrides?: CallOverrides): Promise<BigNumber>

    GRID_HEIGHT(overrides?: CallOverrides): Promise<BigNumber>

    GRID_WIDTH(overrides?: CallOverrides): Promise<BigNumber>

    MAX_PLOTS(overrides?: CallOverrides): Promise<BigNumber>

    PUBLIC_CLAIM_FEE(overrides?: CallOverrides): Promise<BigNumber>

    PUBLIC_PLOTS_RESERVED(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    claimTo(
      to: string,
      plotID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    claimWithLoot(
      lootID: BigNumberish,
      plotID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    exists(plotID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPlotID(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getXY(plotID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    hasAdjacentPlot(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initialize(
      lootNFT_: string,
      towns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    lootNFT(overrides?: CallOverrides): Promise<BigNumber>

    lootPlotsCalimed(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    publicPlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    FREE_PLOTS(overrides?: CallOverrides): Promise<PopulatedTransaction>

    GRID_HEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    GRID_WIDTH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_PLOTS(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PUBLIC_CLAIM_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PUBLIC_PLOTS_RESERVED(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    claimTo(
      to: string,
      plotID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    claimWithLoot(
      lootID: BigNumberish,
      plotID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    exists(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPlotID(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getXY(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    hasAdjacentPlot(
      plotID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initialize(
      lootNFT_: string,
      towns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    lootNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lootPlotsCalimed(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    publicPlotsAvailable(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
